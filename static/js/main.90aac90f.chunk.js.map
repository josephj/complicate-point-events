{"version":3,"sources":["Crop.js","useLongClick.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["timer","document","addEventListener","e","console","log","forwardRef","_","ref","useState","isMoving","setIsMoving","posX","setPosX","className","cx","onPointerDown","clientX","el","current","setTimeout","style","touchAction","closest","onPointerUp","clearTimeout","onPointerMove","currentTarget","maxMoveX","parentNode","offsetWidth","moveX","left","Math","min","max","offsetLeft","top","onPointerCancel","onContextMenu","preventDefault","onPointerOut","onPointerLeave","useLongClick","callback","options","duration","isSkipMouse","useEffect","startTime","unbind","removeEventListener","handlePointerUp","handlePointerCancel","handlePointerDown","performance","now","isMouseEvent","pointerType","isSkip","isPassed","Item","id","itemRef","useRef","isSelected","setIsSelected","handleLongClick","useCallback","cropRef","App","Array","from","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90aac90f.chunk.js","sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useState } from \"react\";\n// import useLongPress from \"./useLongPress\";\n\ndocument.addEventListener(\"pointercancel\", (e) => {\n  console.log(\"handleDocumentPointerCancel\");\n});\n\nlet timer;\nconst Crop = (_, ref) => {\n  const [isMoving, setIsMoving] = useState(false);\n  const [posX, setPosX] = useState(null);\n\n  const handlePointerDown = (e) => {\n    console.log(\"handlePointerDown\");\n    setPosX(e.clientX);\n    const el = ref.current;\n    timer = setTimeout(() => {\n      // callback\n      setIsMoving(true);\n      el.style.touchAction = \"none\";\n      el.closest(\".Item \").style.touchAction = \"none\";\n      console.log(\n        \"handlePointerUp > touchAction\",\n        el.closest(\".Item\").style.touchAction\n      );\n      timer = null;\n    }, 500);\n  };\n\n  const handlePointerUp = (e) => {\n    if (timer) {\n      clearTimeout(timer);\n      console.log(\"handlePointerUp > Failed to long press\");\n    } else {\n      // success long press\n      const el = ref.current;\n      el.style.touchAction = \"\";\n      el.closest(\".Item \").style.touchAction = \"\";\n      console.log(\n        \"handlePointerUp > touchAction\",\n        el.closest(\".Item\").style.touchAction\n      );\n      console.log(\"handlePointerUp > Long pressed\");\n    }\n    setIsMoving(false);\n  };\n\n  const handlePointerMove = (e) => {\n    if (!isMoving) return;\n    console.log(\"handlePointerMove\");\n    const el = e.currentTarget;\n    const parentEl = el.parentNode;\n    const maxMoveX = parentEl.offsetWidth - el.offsetWidth - 8;\n    const moveX = posX - e.clientX;\n    const left = Math.min(Math.max(0, el.offsetLeft - moveX), maxMoveX);\n    el.style.top = 0;\n    el.style.left = `${left}px`;\n    setPosX(e.clientX);\n  };\n\n  const handlePointerOut = () => {\n    console.log(\"handlePointerOut\");\n  };\n\n  const handlePointerLeave = () => {\n    console.log(\"handlePointerLeave\");\n  };\n\n  const handlePointerCancel = (e) => {\n    console.log(\"handlePointerCancel\");\n    if (timer) clearTimeout(timer);\n    setPosX(null);\n    setIsMoving(false);\n  };\n\n  return (\n    <span\n      ref={ref}\n      className={cx(\"Crop\", { \"Crop--moving\": isMoving })}\n      onPointerDown={handlePointerDown}\n      onPointerUp={handlePointerUp}\n      onPointerMove={handlePointerMove}\n      onPointerCancel={handlePointerCancel}\n      onContextMenu={(e) => e.preventDefault()}\n      onPointerOut={handlePointerOut}\n      onPointerLeave={handlePointerLeave}\n    ></span>\n  );\n};\n\nexport default forwardRef(Crop);\n","import { useEffect } from \"react\";\n\nconst useLongClick = (ref, callback, options) => {\n  const { duration = 150, isSkipMouse = true } = options || {};\n\n  useEffect(() => {\n    const el = ref.current;\n\n    let startTime = null;\n\n    const bind = () => {\n      el.addEventListener(\"pointerup\", handlePointerUp);\n      el.addEventListener(\"pointerleave\", handlePointerCancel);\n      el.addEventListener(\"pointercancel\", handlePointerCancel);\n    };\n\n    const unbind = () => {\n      el.removeEventListener(\"pointerup\", handlePointerUp);\n      el.removeEventListener(\"pointerleave\", handlePointerCancel);\n      el.removeEventListener(\"pointercancel\", handlePointerCancel);\n    };\n\n    const handlePointerDown = () => {\n      startTime = performance.now();\n      bind();\n    };\n\n    const handlePointerCancel = () => {\n      startTime = null;\n      unbind();\n    };\n\n    const handlePointerUp = (e) => {\n      const isMouseEvent = e.pointerType === \"mouse\";\n      const isSkip = isSkipMouse && isMouseEvent;\n      const isPassed = performance.now() - startTime >= duration;\n      if (isSkip || isPassed) callback(e);\n      startTime = null;\n      unbind();\n    };\n\n    el.addEventListener(\"pointerdown\", handlePointerDown);\n    return () => el.removeEventListener(\"pointerdown\", handlePointerDown);\n  }, [ref, callback, duration, isSkipMouse]);\n};\n\nexport default useLongClick;\n","import cx from \"classnames\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport Crop from \"./Crop\";\nimport useLongClick from \"./useLongClick\";\n\nconst Item = ({ id }) => {\n  // Selection\n  const itemRef = useRef(null);\n  const [isSelected, setIsSelected] = useState(false);\n  const handleLongClick = useCallback((e) => setIsSelected(!isSelected), [\n    isSelected,\n  ]);\n  useLongClick(itemRef, handleLongClick);\n\n  // Enabling Crop\n  const cropRef = useRef(null);\n\n  return (\n    <li ref={itemRef} className={cx(\"Item\", { \"Item--selected\": isSelected })}>\n      <Crop ref={cropRef} />\n      <span className=\"Label\">#{id + 1}</span>\n    </li>\n  );\n};\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pointer Events</h1>\n      <p>Scrolling, Item Selection, and Crop Moving</p>\n      <ul>\n        {Array.from(Array(50)).map((_, i) => (\n          <Item key={i} id={i} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}