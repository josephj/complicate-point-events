{"version":3,"sources":["Crop.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["timer","labelStyle","errorStyle","document","addEventListener","e","console","log","type","Crop","isLandscape","ref","useRef","useState","isMoving","setIsMoving","posX","setPosX","posY","setPosY","useEffect","el","current","appEl","closest","handlePointerDown","clientX","clientY","touches","setTimeout","style","touchAction","handlePointerUp","clearTimeout","handlePointerMove","preventDefault","parentEl","parentNode","maxMove","offsetWidth","offsetHeight","move","offset","offsetLeft","offsetTop","position","Math","min","max","left","top","handlePointerCancel","target","className","passive","removeEventListener","cx","onContextMenu","Item","id","hasCrop","random","itemRef","isSelected","setIsSelected","pressed","pos","abs","key","App","Array","from","map","_","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64ce450b.chunk.js","sourcesContent":["import cx from \"classnames\";\nimport React, { useRef, useState, useEffect } from \"react\";\n\nconst CROP_DELAY = 300;\n\nlet timer;\nlet labelStyle = `background: #369; color: #fff; padding: 2px 5px; width: 100px; border-radius: 4px; display: inline-block`;\nlet errorStyle = `background: #c00; color: #fff; padding: 2px 5px; width: 100px; border-radius: 4px; display: inline-block`;\n\ndocument.addEventListener(\"pointercancel\", (e) => {\n  console.log(\n    `%c${e.type}`,\n    errorStyle,\n    \"document pointercancel is triggered!\"\n  );\n});\n\nconst Crop = ({ isLandscape }) => {\n  const ref = useRef(null);\n  const [isMoving, setIsMoving] = useState(false);\n  const [posX, setPosX] = useState(null);\n  const [posY, setPosY] = useState(null);\n  useEffect(() => {\n    const el = ref.current;\n    const appEl = el.closest(\".App\");\n\n    const handlePointerDown = ({ type, clientX, clientY, touches = [] }) => {\n      console.log(`%c${type}`, labelStyle);\n      clientX = clientX || touches[0].clientX;\n      clientY = clientY || touches[0].clientY;\n      if (isLandscape) setPosX(clientX);\n      else setPosY(clientY);\n      timer = setTimeout(() => {\n        setIsMoving(true);\n        appEl.style.touchAction = \"none\";\n        // appEl.style.overflowY = \"hidden\";\n        timer = null;\n      }, CROP_DELAY);\n    };\n\n    const handlePointerUp = ({ type }) => {\n      if (timer) {\n        clearTimeout(timer);\n        console.log(`%c${type}`, labelStyle, `Failed to long press`);\n      } else {\n        console.log(`%c${type}`, labelStyle, \"Long pressed successfully\");\n      }\n      appEl.style.touchAction = \"\";\n      // appEl.style.overflowY = \"auto\";\n      setIsMoving(false);\n    };\n\n    const handlePointerMove = (e) => {\n      let { type, clientX, clientY, touches = [] } = e;\n      clientX = clientX || touches[0].clientX;\n      clientY = clientY || touches[0].clientY;\n\n      if (!isMoving) return;\n      e.preventDefault();\n      const parentEl = el.parentNode;\n      const maxMove = isLandscape\n        ? parentEl.offsetWidth - el.offsetWidth - 8\n        : parentEl.offsetHeight - el.offsetHeight - 8;\n      const move = isLandscape ? posX - clientX : posY - clientY;\n      const offset = isLandscape ? el.offsetLeft : el.offsetTop;\n      const position = Math.min(Math.max(0, offset - move), maxMove);\n      if (isLandscape) {\n        el.style.left = `${position}px`;\n        setPosX(clientX);\n      } else {\n        el.style.top = `${position}px`;\n        setPosY(clientY);\n      }\n      console.log(`%c${type}`, labelStyle, \"movement\", position);\n    };\n\n    const handlePointerCancel = (e) => {\n      console.log(`%c${e.type}`, errorStyle, e.target.className);\n      if (timer) clearTimeout(timer);\n      if (isLandscape) setPosX(null);\n      else setPosY(null);\n      // appEl.style.overflowY = \"auto\";\n      appEl.style.touchAction = \"\";\n      setIsMoving(false);\n    };\n\n    el.addEventListener(\"touchstart\", handlePointerDown, { passive: true });\n    el.addEventListener(\"touchend\", handlePointerUp);\n    el.addEventListener(\"touchmove\", handlePointerMove);\n    el.addEventListener(\"touchcancel\", handlePointerCancel);\n    el.addEventListener(\"mousedown\", handlePointerDown);\n    el.addEventListener(\"mouseup\", handlePointerUp);\n    el.addEventListener(\"mousemove\", handlePointerMove);\n    return () => {\n      el.removeEventListener(\"touchstart\", handlePointerDown);\n      el.removeEventListener(\"touchend\", handlePointerUp);\n      el.removeEventListener(\"touchmove\", handlePointerMove);\n      el.removeEventListener(\"touchcancel\", handlePointerCancel);\n      el.removeEventListener(\"mousedown\", handlePointerDown);\n      el.removeEventListener(\"mouseup\", handlePointerUp);\n      el.removeEventListener(\"mousemove\", handlePointerMove);\n    };\n  }, [isMoving, posX, posY, isLandscape]);\n\n  return (\n    <span\n      ref={ref}\n      className={cx(\"Crop\", {\n        \"Crop-portrait\": !isLandscape,\n        \"Crop-landscape\": isLandscape,\n        \"Crop--moving\": isMoving,\n      })}\n      onContextMenu={(e) => e.preventDefault()}\n    ></span>\n  );\n};\n\nexport default Crop;\n","import cx from \"classnames\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Crop from \"./Crop\";\n\nconst Item = ({ id }) => {\n  const hasCrop = useRef(Math.random() > 0.4);\n  const isLandscape = useRef(Math.random() >= 0.5);\n  const itemRef = useRef(null);\n  const [isSelected, setIsSelected] = useState(false);\n\n  useEffect(() => {\n    const el = itemRef.current;\n\n    let pressed = false;\n    let pos = null;\n\n    const handlePointerDown = (e) => {\n      pos = [e.clientX, e.clientY];\n      pressed = true;\n    };\n\n    const handlePointerUp = (e) => {\n      if (!pressed) return;\n      if (hasCrop) {\n        const movement =\n          Math.abs(e.clientX - pos[0]) + Math.abs(e.clientY - pos[1]);\n        if (movement > 0) return;\n      }\n      setIsSelected(!isSelected);\n    };\n\n    const handlePointerCancel = () => {\n      pressed = false;\n      pos = null;\n    };\n\n    el.addEventListener(\"pointerdown\", handlePointerDown);\n    el.addEventListener(\"pointerup\", handlePointerUp);\n    el.addEventListener(\"pointerleave\", handlePointerCancel);\n    el.addEventListener(\"pointerout\", handlePointerCancel);\n    el.addEventListener(\"pointercancel\", handlePointerCancel);\n    return () => {\n      el.removeEventListener(\"pointerdown\", handlePointerDown);\n      el.removeEventListener(\"pointerup\", handlePointerUp);\n      el.removeEventListener(\"pointerleave\", handlePointerCancel);\n      el.removeEventListener(\"pointerout\", handlePointerCancel);\n      el.removeEventListener(\"pointercancel\", handlePointerCancel);\n    };\n  }, [isSelected]);\n\n  return (\n    <li\n      ref={itemRef}\n      className={cx(\"Item\", { \"Item--selected\": isSelected })}\n      onContextMenu={(e) => e.preventDefault()}\n    >\n      {hasCrop.current && (\n        <Crop key={`Crop-${id}`} id={id} isLandscape={isLandscape.current} />\n      )}\n      <span className=\"Label\">#{id + 1}</span>\n    </li>\n  );\n};\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pointer Events</h1>\n      <p>Scrolling, Item Selection, and Crop Moving (150ms)</p>\n      <ul>\n        {Array.from(Array(50)).map((_, i) => (\n          <Item key={`Item-${i}`} id={i} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}